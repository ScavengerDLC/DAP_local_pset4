filtering_time_csv <- end_time_raw - start_time_raw
print(paste0(filtering_time_csv, " seconds from start to finish: Filtering the non-partitioned data."))
print(n_rows_csv)
### Partioned Data
start_time_partitioned <- Sys.time()
### I couldn't figure out how to filter based on state after reading in every
### datasets as partitioned_parquet. However, I would argue that the wording of the
### question makes this solution a valid one also.
### To make this an apples to apples comparison, I'll have the previous step
### also read in the dataset for the first time.
state_data <- open_dataset(
sources = paste0(csv_path, "state=", as.character({{two_letter_state}}), "/part-0.parquet"),
format = "parquet"
)
severity_breakdown_partitioned <- state_data |>
group_by(scope_severity)|>
collect() |>
summarise(n = n())
n_rows_partitioned <- sum(severity_breakdown_partitioned$n)
end_time_partitioned <- Sys.time()
filtering_time_partitioned <- end_time_partitioned - start_time_partitioned
print(paste0(filtering_time_partitioned, " seconds from start to finish: Filtering the partitioned data."))
print(n_rows_partitioned)
time_difference <- filtering_time_csv - filtering_time_partitioned
print(time_difference)
computation_time <- data.frame(state = {{two_letter_state}},
time_partitioned = filtering_time_partitioned,
time_non_partitioned = filtering_time_csv,
time_difference = time_difference,
n = n_rows_partitioned)
}
### Test the Function
test <- filter_timer("NY")
graph_path <- "C:/Users/zades/Documents/GitHub/problem-set-4-ScavengerDLC/Question1.5Graphs/"
### Read in Generated CSVs and combine them
filtering_times <- data.frame(matrix(nrow = 0 , ncol = 6))
names(filtering_times) <- c("state", "time_partitioned", "time_non_partitioned", "time_difference", "n", "magnitude_time_difference")
### Don't change this upper bound, this reads the files
for(g in 1:100){
df <- read.csv(paste0(graph_path, "filtering_times_", as.character(g), ".csv"))
filtering_times <- rbind(filtering_times, df)
}
filtering_times <- filtering_times |> select(!X)
filtering_times <- filtering_times |>
mutate(
n_transformed = log(n)
)
cali_filter <- filtering_times |> filter(state == "CA")
### Graph with Log Scale for X Axis
filtering_times |>
ggplot(aes(x = n_transformed , y = magnitude_time_difference)) +
geom_point() +
stat_smooth(method = "loess", formula=y~x) +
ylim(0,80) +
theme(panel.background = element_blank(),
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_line(color = "grey90")) +
labs(x = "Log Number of Observations",
y = "Magnitude of Time Difference",
title = "Magnitude of Time Differences when Filtering Partitioned Data vs Non Partioned Data",
subtitle = "By Number of Observations",
caption = "Magnitude of 2 means Partitioned Data filted twice as fast as Non-Partitioned")
### If you run the previous steps on your own computer and then this graph, you
### WILL get a different graph than are shown in the folder that is uploaded
### to github
### If you want to make sure that the graph is reproducible, run the code on
### line XXX. I saved the CSVs for all the graphs that I made here to make the
### argument that I'm making in the readme.
filtering_times |>
ggplot(aes(x = n , y = magnitude_time_difference)) +
geom_point() +
stat_smooth(method = "loess", formula=y~log(x)) +
ylim(0,80) +
theme(panel.background = element_blank(),
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_line(color = "grey90")) +
labs(x = "Number of Observations",
y = "Magnitude of Time Difference",
title = "Magnitude of Time Differences when Filtering Partitioned Data vs Non Partioned Data",
subtitle = "By Number of Observations",
caption = "Magnitude of 2 means Partitioned Data filted twice as fast as Non-Partitioned")
version
?input
?sample.int
word_bank <- list(c("apple", "brave", "crane", "drive", "eagle",
"fable", "grape", "house", "input", "joker",
"knife", "lemon", "mango", "nerve", "ocean"))
View(word_bank)
word_bank <- c("apple", "brave", "crane", "drive", "eagle",
"fable", "grape", "house", "input", "joker",
"knife", "lemon", "mango", "nerve", "ocean"))
word_bank <- c("apple", "brave", "crane", "drive", "eagle",
"fable", "grape", "house", "input", "joker",
"knife", "lemon", "mango", "nerve", "ocean")
sample.int(15, 1)
sample.int(15, 1)
sample.int(15, 1)
sample.int(15, 1)
sample.int(15, 1)
sample.int(15, 1)
sample.int(15, 1)
sample.int(15, 1)
word_bank[sample.int(15, 1)]
word_bank[sample.int(15, 1)]
word_bank[sample.int(15, 1)]
word_bank[sample.int(15, 1)]
?if
### Creates Function
guessing_game <- function(word_bank, max_guesses){
### Creates Function
guessing_game <- function(word_bank, max_guesses){
### Roll Number
number <- sample.int(15, 1)
### Use randomly generated number to select word from word bank
secret_word <-  word_bank[number]
attempt_counter <- 0
print("Welcome!")
print(paste0("You have ," {{max_guesses}} , " attempts"))
### Creates Function
guessing_game <- function(word_bank, max_guesses){
### Roll Number
number <- sample.int(15, 1)
### Use randomly generated number to select word from word bank
secret_word <-  word_bank[number]
attempt_counter <- 0
print("Welcome!")
print(paste0("You have ", {{max_guesses}}, " attempts"))
print(secret_word)
}
guessing_game(word_bank, 5)
?nchar
test <- guessing_game(word_bank, 5)
test[2]
### Creates Function
guessing_game <- function(word_bank, max_guesses){
### Roll Number
number <- sample.int(15, 1)
### Use randomly generated number to select word from word bank
secret_word <-  {{word_bank}}[number]
secret_word <- str_to_lower(secret_word)
secret_word <- str_squish(secret_word)
attempt_counter <- 0
print("Welcome!")
print(paste0("You have ", {{max_guesses}}, " attempts"))
while (attempt_counter < {{max_guesses}}) {
guess <- readline(prompt = "Enter your guess: ")
guess <- str_to_lower(guess)
guess <- str_squish(guess)
if (nchar(guess) != 5 | grepl("[0-9]", guess) == TRUE | grepl("[^A-Za-z0-9 ]") == TRUE) {
print("Invalid Guess")
next
}
attempt_counter <- attempt_counter + 1
if (guess == secret_word){
print(paste0("Congratulations! You guessed the word in " attempt_counter))
### Creates Function
guessing_game <- function(word_bank, max_guesses){
### Roll Number
number <- sample.int(15, 1)
### Use randomly generated number to select word from word bank
secret_word <-  {{word_bank}}[number]
secret_word <- str_to_lower(secret_word)
secret_word <- str_squish(secret_word)
attempt_counter <- 0
print("Welcome!")
print(paste0("You have ", {{max_guesses}}, " attempts"))
while (attempt_counter < {{max_guesses}}) {
guess <- readline(prompt = "Enter your guess: ")
guess <- str_to_lower(guess)
guess <- str_squish(guess)
if (nchar(guess) != 5 | grepl("[0-9]", guess) == TRUE | grepl("[^A-Za-z0-9 ]") == TRUE) {
print("Invalid Guess")
next
}
attempt_counter <- attempt_counter + 1
if (guess == secret_word){
print(paste0("Congratulations! You guessed the word in ", attempt_counter, " tries!"))
}
}
}
guessing_game(word_bank, 5)
### Creates Function
guessing_game <- function(word_bank, max_guesses){
### Roll Number
number <- sample.int(15, 1)
### Use randomly generated number to select word from word bank
secret_word <-  {{word_bank}}[number]
secret_word <- str_to_lower(secret_word)
secret_word <- str_squish(secret_word)
attempt_counter <- 0
print("Welcome!")
print(paste0("You have ", {{max_guesses}}, " attempts"))
while (attempt_counter < {{max_guesses}}) {
guess <- readline(prompt = "Enter your guess: ")
guess <- str_to_lower(guess)
guess <- str_squish(guess)
if (nchar(guess) != 5 | grepl("[0-9]", guess) == TRUE | grepl("[^A-Za-z0-9]") == TRUE) {
print("Invalid Guess")
next
}
attempt_counter <- attempt_counter + 1
if (guess == secret_word){
print(paste0("Congratulations! You guessed the word in ", attempt_counter, " tries!"))
}
}
}
### Creates Function
guessing_game <- function(word_bank, max_guesses){
### Roll Number
number <- sample.int(15, 1)
### Use randomly generated number to select word from word bank
secret_word <-  {{word_bank}}[number]
secret_word <- str_to_lower(secret_word)
secret_word <- str_squish(secret_word)
attempt_counter <- 0
print("Welcome!")
print(paste0("You have ", {{max_guesses}}, " attempts"))
while (attempt_counter < {{max_guesses}}) {
guess <- readline(prompt = "Enter your guess: ")
guess <- str_to_lower(guess)
guess <- str_squish(guess)
if (nchar(guess) != 5 | grepl("[0-9]", guess) == TRUE | grepl("[^A-Za-z0-9]") == TRUE) {
print("Invalid Guess")
next
}
attempt_counter <- attempt_counter + 1
if (guess == secret_word){
print(paste0("Congratulations! You guessed the word in ", attempt_counter, " tries!"))
}
}
}
guessing_game(word_bank, 5)
### Creates Function
guessing_game <- function(word_bank, max_guesses){
### Roll Number
number <- sample.int(15, 1)
### Use randomly generated number to select word from word bank
secret_word <-  {{word_bank}}[number]
secret_word <- str_to_lower(secret_word)
secret_word <- str_squish(secret_word)
attempt_counter <- 0
print("Welcome!")
print(paste0("You have ", {{max_guesses}}, " attempts"))
while (attempt_counter < {{max_guesses}}) {
guess <- readline(prompt = "Enter your guess: ")
guess <- str_to_lower(guess)
guess <- str_squish(guess)
if (nchar(guess) != 5 | grepl("[0-9]", guess) == TRUE | grepl("[^A-Za-z0-9 ]", guess) == TRUE) {
print("Invalid Guess")
next
}
attempt_counter <- attempt_counter + 1
if (guess == secret_word){
print(paste0("Congratulations! You guessed the word in ", attempt_counter, " tries!"))
}
}
}
### Creates Function
guessing_game <- function(word_bank, max_guesses){
### Roll Number
number <- sample.int(15, 1)
### Use randomly generated number to select word from word bank
secret_word <-  {{word_bank}}[number]
secret_word <- str_to_lower(secret_word)
secret_word <- str_squish(secret_word)
attempt_counter <- 0
print("Welcome!")
print(paste0("You have ", {{max_guesses}}, " attempts"))
while (attempt_counter < {{max_guesses}}) {
guess <- readline(prompt = "Enter your guess: ")
guess <- str_to_lower(guess)
guess <- str_squish(guess)
if (nchar(guess) != 5 | grepl("[0-9]", guess) == TRUE | grepl("[^A-Za-z0-9 ]", guess) == TRUE) {
print("Invalid Guess")
next
}
attempt_counter <- attempt_counter + 1
if (guess == secret_word){
print(paste0("Congratulations! You guessed the word in ", attempt_counter, " tries!"))
}
}
}
guessing_game(word_bank, 5)
fable
### Creates Function
guessing_game <- function(word_bank, max_guesses){
### Roll Number
number <- sample.int(15, 1)
### Use randomly generated number to select word from word bank
secret_word <-  {{word_bank}}[number]
secret_word <- str_to_lower(secret_word)
secret_word <- str_squish(secret_word)
attempt_counter <- 0
print("Welcome!")
print(paste0("You have ", {{max_guesses}}, " attempts"))
while (attempt_counter < {{max_guesses}}) {
guess <- readline(prompt = "Enter your guess: ")
guess <- str_to_lower(guess)
guess <- str_squish(guess)
if (nchar(guess) != 5 | grepl("[0-9]", guess) == TRUE | grepl("[^A-Za-z0-9 ]", guess) == TRUE) {
print("Invalid Guess")
}
attempt_counter <- attempt_counter + 1
if (guess == secret_word){
print(paste0("Congratulations! You guessed the word in ", attempt_counter, " tries!"))
}
if (guess != secret_word)
}
### Creates Function
guessing_game <- function(word_bank, max_guesses){
### Roll Number
number <- sample.int(15, 1)
### Use randomly generated number to select word from word bank
secret_word <-  {{word_bank}}[number]
secret_word <- str_to_lower(secret_word)
secret_word <- str_squish(secret_word)
attempt_counter <- 0
print("Welcome!")
print(paste0("You have ", {{max_guesses}}, " attempts"))
while (attempt_counter < {{max_guesses}}) {
guess <- readline(prompt = "Enter your guess: ")
guess <- str_to_lower(guess)
guess <- str_squish(guess)
if (nchar(guess) != 5 | grepl("[0-9]", guess) == TRUE | grepl("[^A-Za-z0-9 ]", guess) == TRUE) {
print("Invalid Guess")
}
attempt_counter <- attempt_counter + 1
if (guess == secret_word){
print(paste0("Congratulations! You guessed the word in ", attempt_counter, " tries!"))
}
}
}
guessing_game(word_bank, 5)
ant
substr(apple, 1, 1)
substr("apple", 1, 1)
substr("apple", 2, 2)
test <- ""
### Creates Function
guessing_game <- function(word_bank, max_guesses){
guessing_game(word_bank, 5)
guessing_game(word_bank, 5)
### Creates Function
guessing_game <- function(word_bank, max_guesses){
### Roll Number
number <- sample.int(15, 1)
### Use randomly generated number to select word from word bank
secret_word <-  {{word_bank}}[number]
secret_word <- str_to_lower(secret_word)
secret_word <- str_squish(secret_word)
attempt_counter <- 0
print("Welcome!")
print(paste0("You have ", {{max_guesses}}, " attempts"))
while (attempt_counter < {{max_guesses}}) {
guess <- readline(prompt = "Enter your guess: ")
guess <- str_to_lower(guess)
guess <- str_squish(guess)
if (nchar(guess) != 5 | grepl("[0-9]", guess) == TRUE | grepl("[^A-Za-z0-9 ]", guess) == TRUE) {
print("Invalid Guess")
next
}
attempt_counter <- attempt_counter + 1
if (guess == secret_word){
print(paste0("Congratulations! You guessed the word in ", attempt_counter, " tries!"))
break
}
if (guess != secret_word){
hint <- ""
for (i in 1:5) {
ifelse(substr(guess, i, i) == substr(secret_word, i, i),
hint <- paste0(hint, substr(guess, i, i)),
hint <- paste0(hint, "_"))
}
attempts_remaining <- {{max_guesses}} - attempt_counter
print(paste0("Wrong! Here's what you got right:", hint))
print(paste0("You have", attempts_remaining, "attempts remaining!"))
}
}
}
guessing_game(word_bank, 5)
library(tidyverse)
### Creates word bank
word_bank <- c("apple", "brave", "crane", "drive", "eagle",
"fable", "grape", "house", "input", "joker",
"knife", "lemon", "mango", "nerve", "ocean")
### Creates Function
guessing_game <- function(word_bank, max_guesses){
### Roll Number
number <- sample.int(15, 1)
### Use randomly generated number to select word from word bank
secret_word <-  {{word_bank}}[number]
secret_word <- str_to_lower(secret_word)
secret_word <- str_squish(secret_word)
attempt_counter <- 0
print("Welcome!")
print(paste0("You have ", {{max_guesses}}, " attempts"))
while (attempt_counter < {{max_guesses}}) {
guess <- readline(prompt = "Enter your guess: ")
guess <- str_to_lower(guess)
guess <- str_squish(guess)
if (nchar(guess) != 5 | grepl("[0-9]", guess) == TRUE | grepl("[^A-Za-z0-9 ]", guess) == TRUE) {
print("Invalid Guess")
next
}
attempt_counter <- attempt_counter + 1
if (guess == secret_word){
print(paste0("Congratulations! You guessed the word in ", attempt_counter, " tries!"))
break
}
if (guess != secret_word){
hint <- ""
for (i in 1:5) {
ifelse(substr(guess, i, i) == substr(secret_word, i, i),
hint <- paste0(hint, substr(guess, i, i)),
hint <- paste0(hint, "_"))
}
attempts_remaining <- {{max_guesses}} - attempt_counter
print(paste0("Wrong! Here's what you got right:", hint))
print(paste0("You have", attempts_remaining, "attempts remaining!"))
}
}
}
guessing_game(word_bank, 5)
guessing_game(word_bank, 5)
### Creates Function
guessing_game <- function(word_bank, max_guesses){
### Roll Number
number <- sample.int(15, 1)
### Use randomly generated number to select word from word bank
secret_word <-  {{word_bank}}[number]
secret_word <- str_to_lower(secret_word)
secret_word <- str_squish(secret_word)
attempt_counter <- 0
print("Welcome!")
print(paste0("You have ", {{max_guesses}}, " attempts"))
while (attempt_counter < {{max_guesses}}) {
guess <- readline(prompt = "Enter your guess: ")
guess <- str_to_lower(guess)
guess <- str_squish(guess)
if (nchar(guess) != 5 | grepl("[0-9]", guess) == TRUE | grepl("[^A-Za-z0-9 ]", guess) == TRUE) {
print("Invalid Guess")
next
}
attempt_counter <- attempt_counter + 1
if (guess == secret_word){
print(paste0("Congratulations! You guessed the word in ", attempt_counter, " tries!"))
break
}
if (guess != secret_word){
hint <- ""
for (i in 1:5) {
ifelse(substr(guess, i, i) == substr(secret_word, i, i),
hint <- paste0(hint, substr(guess, i, i)),
hint <- paste0(hint, "_"))
}
attempts_remaining <- {{max_guesses}} - attempt_counter
print(paste0("Wrong! Here's what you got right:", hint))
print(paste0("You have ", attempts_remaining, " attempts remaining!"))
}
}
if (attempt_counter == {{max_guesses}}){
print(paste0("Game Over: The Correct word was ", secret_word))
}
}
guessing_game()
guessing_game("word_bank", 5)
apple
### Creates Function
guessing_game <- function(word_bank, max_guesses){
### Roll Number
number <- sample.int(15, 1)
### Use randomly generated number to select word from word bank
secret_word <-  {{word_bank}}[number]
secret_word <- str_to_lower(secret_word)
secret_word <- str_squish(secret_word)
attempt_counter <- 0
print("Welcome!")
print(paste0("You have ", {{max_guesses}}, " attempts"))
while (attempt_counter < {{max_guesses}}) {
guess <- readline(prompt = "Enter your guess: ")
guess <- str_to_lower(guess)
guess <- str_squish(guess)
if (nchar(guess) != 5 | grepl("[0-9]", guess) == TRUE | grepl("[^A-Za-z0-9 ]", guess) == TRUE) {
print("Invalid Guess")
next
}
attempt_counter <- attempt_counter + 1
if (guess == secret_word){
print(paste0("Congratulations! You guessed the word in ", attempt_counter, " tries!"))
break
}
if (guess != secret_word){
hint <- ""
for (i in 1:5) {
ifelse(substr(guess, i, i) == substr(secret_word, i, i),
hint <- paste0(hint, substr(guess, i, i)),
hint <- paste0(hint, "_"))
}
attempts_remaining <- {{max_guesses}} - attempt_counter
print(paste0("Wrong! Here's what you got right:", hint))
print(paste0("You have ", attempts_remaining, " attempts remaining!"))
}
}
if (attempt_counter == {{max_guesses}}){
print(paste0("Game Over: The Correct word was ", secret_word))
}
}
guessing_game(word_bank, 5)
guessing_game(word_bank, 5)
guessing_game(word_bank, 5)
apple
guessing_game(word_bank, 5)
